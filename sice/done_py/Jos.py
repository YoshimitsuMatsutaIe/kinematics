import numpy as np
from math import cos as c
from math import sin as s
from math import tan as ta
from math import sqrt as sq
def jo_0(q):
    return np.array([[0, 0, 0, 0], [0, 0, 0, 0]])
def jo_1(q):
    return np.array([[-l1*s(q0), 0, 0, 0], [l1*c(q0), 0, 0, 0]])
def jo_2(q):
    return np.array([[-l1*s(q0) - l2*s(q0)*c(q1) - l2*s(q1)*c(q0), -l2*s(q0)*c(q1) - l2*s(q1)*c(q0), 0, 0], [l1*c(q0) - l2*s(q0)*s(q1) + l2*c(q0)*c(q1), -l2*s(q0)*s(q1) + l2*c(q0)*c(q1), 0, 0]])
def jo_3(q):
    return np.array([[-l1*s(q0) - l2*s(q0)*c(q1) - l2*s(q1)*c(q0) + l3*s(q0)*s(q1)*s(q2) - l3*s(q0)*c(q1)*c(q2) - l3*s(q1)*c(q0)*c(q2) - l3*s(q2)*c(q0)*c(q1), -l2*s(q0)*c(q1) - l2*s(q1)*c(q0) + l3*s(q0)*s(q1)*s(q2) - l3*s(q0)*c(q1)*c(q2) - l3*s(q1)*c(q0)*c(q2) - l3*s(q2)*c(q0)*c(q1), l3*s(q0)*s(q1)*s(q2) - l3*s(q0)*c(q1)*c(q2) - l3*s(q1)*c(q0)*c(q2) - l3*s(q2)*c(q0)*c(q1), 0], [l1*c(q0) - l2*s(q0)*s(q1) + l2*c(q0)*c(q1) - l3*s(q0)*s(q1)*c(q2) - l3*s(q0)*s(q2)*c(q1) - l3*s(q1)*s(q2)*c(q0) + l3*c(q0)*c(q1)*c(q2), -l2*s(q0)*s(q1) + l2*c(q0)*c(q1) - l3*s(q0)*s(q1)*c(q2) - l3*s(q0)*s(q2)*c(q1) - l3*s(q1)*s(q2)*c(q0) + l3*c(q0)*c(q1)*c(q2), -l3*s(q0)*s(q1)*c(q2) - l3*s(q0)*s(q2)*c(q1) - l3*s(q1)*s(q2)*c(q0) + l3*c(q0)*c(q1)*c(q2), 0]])
def jo_ee(q):
    return np.array([[-l1*s(q0) - l2*s(q0)*c(q1) - l2*s(q1)*c(q0) + l3*s(q0)*s(q1)*s(q2) - l3*s(q0)*c(q1)*c(q2) - l3*s(q1)*c(q0)*c(q2) - l3*s(q2)*c(q0)*c(q1) + l4*s(q0)*s(q1)*s(q2)*c(q3) + l4*s(q0)*s(q1)*s(q3)*c(q2) + l4*s(q0)*s(q2)*s(q3)*c(q1) - l4*s(q0)*c(q1)*c(q2)*c(q3) + l4*s(q1)*s(q2)*s(q3)*c(q0) - l4*s(q1)*c(q0)*c(q2)*c(q3) - l4*s(q2)*c(q0)*c(q1)*c(q3) - l4*s(q3)*c(q0)*c(q1)*c(q2), -l2*s(q0)*c(q1) - l2*s(q1)*c(q0) + l3*s(q0)*s(q1)*s(q2) - l3*s(q0)*c(q1)*c(q2) - l3*s(q1)*c(q0)*c(q2) - l3*s(q2)*c(q0)*c(q1) + l4*s(q0)*s(q1)*s(q2)*c(q3) + l4*s(q0)*s(q1)*s(q3)*c(q2) + l4*s(q0)*s(q2)*s(q3)*c(q1) - l4*s(q0)*c(q1)*c(q2)*c(q3) + l4*s(q1)*s(q2)*s(q3)*c(q0) - l4*s(q1)*c(q0)*c(q2)*c(q3) - l4*s(q2)*c(q0)*c(q1)*c(q3) - l4*s(q3)*c(q0)*c(q1)*c(q2), l3*s(q0)*s(q1)*s(q2) - l3*s(q0)*c(q1)*c(q2) - l3*s(q1)*c(q0)*c(q2) - l3*s(q2)*c(q0)*c(q1) + l4*s(q0)*s(q1)*s(q2)*c(q3) + l4*s(q0)*s(q1)*s(q3)*c(q2) + l4*s(q0)*s(q2)*s(q3)*c(q1) - l4*s(q0)*c(q1)*c(q2)*c(q3) + l4*s(q1)*s(q2)*s(q3)*c(q0) - l4*s(q1)*c(q0)*c(q2)*c(q3) - l4*s(q2)*c(q0)*c(q1)*c(q3) - l4*s(q3)*c(q0)*c(q1)*c(q2), l4*s(q0)*s(q1)*s(q2)*c(q3) + l4*s(q0)*s(q1)*s(q3)*c(q2) + l4*s(q0)*s(q2)*s(q3)*c(q1) - l4*s(q0)*c(q1)*c(q2)*c(q3) + l4*s(q1)*s(q2)*s(q3)*c(q0) - l4*s(q1)*c(q0)*c(q2)*c(q3) - l4*s(q2)*c(q0)*c(q1)*c(q3) - l4*s(q3)*c(q0)*c(q1)*c(q2)], [l1*c(q0) - l2*s(q0)*s(q1) + l2*c(q0)*c(q1) - l3*s(q0)*s(q1)*c(q2) - l3*s(q0)*s(q2)*c(q1) - l3*s(q1)*s(q2)*c(q0) + l3*c(q0)*c(q1)*c(q2) + l4*s(q0)*s(q1)*s(q2)*s(q3) - l4*s(q0)*s(q1)*c(q2)*c(q3) - l4*s(q0)*s(q2)*c(q1)*c(q3) - l4*s(q0)*s(q3)*c(q1)*c(q2) - l4*s(q1)*s(q2)*c(q0)*c(q3) - l4*s(q1)*s(q3)*c(q0)*c(q2) - l4*s(q2)*s(q3)*c(q0)*c(q1) + l4*c(q0)*c(q1)*c(q2)*c(q3), -l2*s(q0)*s(q1) + l2*c(q0)*c(q1) - l3*s(q0)*s(q1)*c(q2) - l3*s(q0)*s(q2)*c(q1) - l3*s(q1)*s(q2)*c(q0) + l3*c(q0)*c(q1)*c(q2) + l4*s(q0)*s(q1)*s(q2)*s(q3) - l4*s(q0)*s(q1)*c(q2)*c(q3) - l4*s(q0)*s(q2)*c(q1)*c(q3) - l4*s(q0)*s(q3)*c(q1)*c(q2) - l4*s(q1)*s(q2)*c(q0)*c(q3) - l4*s(q1)*s(q3)*c(q0)*c(q2) - l4*s(q2)*s(q3)*c(q0)*c(q1) + l4*c(q0)*c(q1)*c(q2)*c(q3), -l3*s(q0)*s(q1)*c(q2) - l3*s(q0)*s(q2)*c(q1) - l3*s(q1)*s(q2)*c(q0) + l3*c(q0)*c(q1)*c(q2) + l4*s(q0)*s(q1)*s(q2)*s(q3) - l4*s(q0)*s(q1)*c(q2)*c(q3) - l4*s(q0)*s(q2)*c(q1)*c(q3) - l4*s(q0)*s(q3)*c(q1)*c(q2) - l4*s(q1)*s(q2)*c(q0)*c(q3) - l4*s(q1)*s(q3)*c(q0)*c(q2) - l4*s(q2)*s(q3)*c(q0)*c(q1) + l4*c(q0)*c(q1)*c(q2)*c(q3), l4*s(q0)*s(q1)*s(q2)*s(q3) - l4*s(q0)*s(q1)*c(q2)*c(q3) - l4*s(q0)*s(q2)*c(q1)*c(q3) - l4*s(q0)*s(q3)*c(q1)*c(q2) - l4*s(q1)*s(q2)*c(q0)*c(q3) - l4*s(q1)*s(q3)*c(q0)*c(q2) - l4*s(q2)*s(q3)*c(q0)*c(q1) + l4*c(q0)*c(q1)*c(q2)*c(q3)]])
